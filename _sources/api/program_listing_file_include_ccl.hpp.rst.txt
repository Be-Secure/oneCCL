
.. _program_listing_file_include_ccl.hpp:

Program Listing for File ccl.hpp
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ccl.hpp>` (``include\ccl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <memory>
   #include <ostream>
   
   #include "ccl_types.hpp"
   #include "ccl_type_traits.hpp"
   
   class ccl_comm;
   class ccl_stream;
   
   namespace ccl
   {
   
   class communicator;
   class stream;
   
   using communicator_t = std::unique_ptr<ccl::communicator>;
   
   using stream_t = std::unique_ptr<ccl::stream>;
   
   class environment
   {
   public:
       ~environment();
   
       static environment& instance();
   
       void set_resize_fn(ccl_resize_fn_t callback);
   
       communicator_t create_communicator(const ccl::comm_attr* attr = nullptr) const;
   
       stream_t create_stream(ccl::stream_type type = ccl::stream_type::cpu, void* native_stream = nullptr) const;
   
       ccl_version_t get_version() const;
   private:
       environment();
   };
   
   class request
   {
   public:
       virtual void wait() = 0;
   
       virtual bool test() = 0;
   
       virtual ~request() = default;
   };
   
   class stream
   {
   public:
       stream(const stream&) = delete;
       stream& operator=(const stream&) = delete;
   
       stream(stream&&) = default;
       stream& operator=(stream&&) = default;
   
   private:
       friend class communicator;
       friend class environment;
       stream();
       stream(ccl::stream_type type, void* native_stream);
   
       std::shared_ptr<ccl_stream> stream_impl;
   };
   
   class communicator
   {
   public:
   
       using coll_request_t = std::unique_ptr<request>;
   
       size_t rank();
   
       size_t size();
   
       coll_request_t allgatherv(const void* send_buf, size_t send_count,
                                 void* recv_buf, const size_t* recv_counts,
                                 ccl::data_type dtype,
                                 const ccl::coll_attr* attr = nullptr,
                                 const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_type,
                class = typename std::enable_if<ccl::is_native_type_supported<buffer_type>()>::type>
       coll_request_t allgatherv(const buffer_type* send_buf, size_t send_count,
                                 buffer_type* recv_buf, const size_t* recv_counts,
                                 const ccl::coll_attr* attr = nullptr,
                                 const ccl::stream_t& stream = ccl::stream_t());
       template<class buffer_container_type,
                class = typename std::enable_if<ccl::is_class_supported<buffer_container_type>()>::type>
       coll_request_t allgatherv(const buffer_container_type& send_buf, size_t send_count,
                                 buffer_container_type& recv_buf, const size_t* recv_counts,
                                 const ccl::coll_attr* attr = nullptr,
                                 const ccl::stream_t& stream = ccl::stream_t());
   
       coll_request_t allreduce(const void* send_buf, void* recv_buf,
                                size_t count, ccl::data_type dtype,
                                ccl::reduction reduction,
                                const ccl::coll_attr* attr = nullptr,
                                const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_type,
                class = typename std::enable_if<ccl::is_native_type_supported<buffer_type>()>::type>
       coll_request_t allreduce(const buffer_type* send_buf,
                                buffer_type* recv_buf,
                                size_t count,
                                ccl::reduction reduction,
                                const ccl::coll_attr* attr = nullptr,
                                const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_container_type,
                class = typename std::enable_if<ccl::is_class_supported<buffer_container_type>()>::type>
       coll_request_t allreduce(const buffer_container_type& send_buf,
                                buffer_container_type& recv_buf,
                                size_t count,
                                ccl::reduction reduction,
                                const ccl::coll_attr* attr = nullptr,
                                const ccl::stream_t& stream = ccl::stream_t());
   
       coll_request_t alltoall(const void* send_buf, void* recv_buf,
                               size_t count, ccl::data_type dtype,
                               const ccl::coll_attr* attr = nullptr,
                               const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_type,
           class = typename std::enable_if<ccl::is_native_type_supported<buffer_type>()>::type>
       coll_request_t alltoall(const buffer_type* send_buf,
                               buffer_type* recv_buf,
                               size_t count,
                               const ccl::coll_attr* attr = nullptr,
                               const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_container_type,
           class = typename std::enable_if<ccl::is_class_supported<buffer_container_type>()>::type>
       coll_request_t alltoall(const buffer_container_type& send_buf,
                               buffer_container_type& recv_buf,
                               size_t count,
                               const ccl::coll_attr* attr = nullptr,
                               const ccl::stream_t& stream = ccl::stream_t());
   
       coll_request_t alltoallv(const void* send_buf, const size_t* send_counts,
                                void* recv_buf, const size_t* recv_counts,
                                ccl::data_type dtype,
                                const ccl::coll_attr* attr = nullptr,
                                const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_type,
                class = typename std::enable_if<ccl::is_native_type_supported<buffer_type>()>::type>
       coll_request_t alltoallv(const buffer_type* send_buf, const size_t* send_counts,
                                buffer_type* recv_buf, const size_t* recv_counts,
                                const ccl::coll_attr* attr = nullptr,
                                const ccl::stream_t& stream = ccl::stream_t());
       template<class buffer_container_type,
                class = typename std::enable_if<ccl::is_class_supported<buffer_container_type>()>::type>
       coll_request_t alltoallv(const buffer_container_type& send_buf, const size_t* send_counts,
                                buffer_container_type& recv_buf, const size_t* recv_counts,
                                const ccl::coll_attr* attr = nullptr,
                                const ccl::stream_t& stream = ccl::stream_t());
   
       void barrier(const ccl::stream_t& stream = ccl::stream_t());
   
       coll_request_t bcast(void* buf, size_t count,
                            ccl::data_type dtype,
                            size_t root,
                            const ccl::coll_attr* attr = nullptr,
                            const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_type,
                class = typename std::enable_if<ccl::is_native_type_supported<buffer_type>()>::type>
       coll_request_t bcast(buffer_type* buf, size_t count,
                            size_t root,
                            const ccl::coll_attr* attr = nullptr,
                            const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_container_type,
                class = typename std::enable_if<ccl::is_class_supported<buffer_container_type>()>::type>
       coll_request_t bcast(buffer_container_type& buf, size_t count,
                            size_t root,
                            const ccl::coll_attr* attr = nullptr,
                            const ccl::stream_t& stream = ccl::stream_t());
   
   
       coll_request_t reduce(const void* send_buf, void* recv_buf,
                             size_t count,
                             ccl::data_type dtype,
                             ccl::reduction reduction,
                             size_t root,
                             const ccl::coll_attr* attr = nullptr,
                             const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_type,
                class = typename std::enable_if<ccl::is_native_type_supported<buffer_type>()>::type>
       coll_request_t reduce(const buffer_type* send_buf, buffer_type* recv_buf,
                             size_t count,
                             ccl::reduction reduction,
                             size_t root,
                             const ccl::coll_attr* attr = nullptr,
                             const ccl::stream_t& stream = ccl::stream_t());
   
       template<class buffer_container_type,
                class = typename std::enable_if<ccl::is_class_supported<buffer_container_type>()>::type>
       coll_request_t reduce(const buffer_container_type& send_buf, buffer_container_type& recv_buf,
                             size_t count,
                             ccl::reduction reduction,
                             size_t root,
                             const ccl::coll_attr* attr = nullptr,
                             const ccl::stream_t& stream = ccl::stream_t());
   
   
       coll_request_t sparse_allreduce(const void* send_ind_buf, size_t send_ind_count,
                                       const void* send_val_buf, size_t send_val_count,
                                       void** recv_ind_buf, size_t* recv_ind_count,
                                       void** recv_val_buf, size_t* recv_val_count,
                                       ccl::data_type index_dtype,
                                       ccl::data_type value_dtype,
                                       ccl::reduction reduction,
                                       const ccl::coll_attr* attr = nullptr,
                                       const ccl::stream_t& stream = ccl::stream_t());
   
       template<class index_buffer_type,
                class value_buffer_type,
                class = typename std::enable_if<ccl::is_native_type_supported<value_buffer_type>()>::type>
       coll_request_t sparse_allreduce(const index_buffer_type* send_ind_buf, size_t send_ind_count,
                                       const value_buffer_type* send_val_buf, size_t send_val_count,
                                       index_buffer_type** recv_ind_buf, size_t* recv_ind_count,
                                       value_buffer_type** recv_val_buf, size_t* recv_val_count,
                                       ccl::reduction reduction,
                                       const ccl::coll_attr* attr = nullptr,
                                       const ccl::stream_t& stream = ccl::stream_t());
   
       template<class index_buffer_container_type,
                class value_buffer_container_type,
                class = typename std::enable_if<ccl::is_class_supported<value_buffer_container_type>()>::type>
       coll_request_t sparse_allreduce(const index_buffer_container_type& send_ind_buf, size_t send_ind_count,
                                       const value_buffer_container_type& send_val_buf, size_t send_val_count,
                                       index_buffer_container_type** recv_ind_buf, size_t* recv_ind_count,
                                       value_buffer_container_type** recv_val_buf, size_t* recv_val_count,
                                       ccl::reduction reduction,
                                       const ccl::coll_attr* attr = nullptr,
                                       const ccl::stream_t& stream = ccl::stream_t());
   
   private:
       friend class environment;
   
       communicator();
   
       explicit communicator(const ccl::comm_attr* attr);
   
       std::shared_ptr<ccl_comm> comm_impl;
   };
   
   }
