
.. _program_listing_file_include_ccl_types.h:

Program Listing for File ccl_types.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ccl_types.h>` (``include\ccl_types.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "stdlib.h"
   #include "ccl_config.h"
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   typedef enum
   {
       ccl_status_success               = 0,
       ccl_status_out_of_resource       = 1,
       ccl_status_invalid_arguments     = 2,
       ccl_status_unimplemented         = 3,
       ccl_status_runtime_error         = 4,
       ccl_status_blocked_due_to_resize = 5,
   
       ccl_status_last_value
   } ccl_status_t;
   
   typedef struct
   {
       unsigned int major;
       unsigned int minor;
       unsigned int update;
       const char* product_status;
       const char* build_date;
       const char* full;
   } ccl_version_t;
   
   typedef int ccl_datatype_t;
   
   #define ccl_dtype_char       ((ccl_datatype_t)(0))
   #define ccl_dtype_int        ((ccl_datatype_t)(1))
   #define ccl_dtype_bfp16      ((ccl_datatype_t)(2))
   #define ccl_dtype_float      ((ccl_datatype_t)(3))
   #define ccl_dtype_double     ((ccl_datatype_t)(4))
   #define ccl_dtype_int64      ((ccl_datatype_t)(5))
   #define ccl_dtype_uint64     ((ccl_datatype_t)(6))
   #define ccl_dtype_last_value ((ccl_datatype_t)(7))
   
   typedef enum
   {
       ccl_reduction_sum    = 0,
       ccl_reduction_prod   = 1,
       ccl_reduction_min    = 2,
       ccl_reduction_max    = 3,
       ccl_reduction_custom = 4,
   
       ccl_reduction_last_value
   } ccl_reduction_t;
   
   typedef enum
   {
       ccl_stream_cpu  = 0,
       ccl_stream_sycl = 1,
   
       ccl_stream_last_value
   } ccl_stream_type_t;
   
   typedef enum ccl_resize_action
   {
       /* Wait additional changes for number of ranks */
       ccl_ra_wait     = 0,
       /* Run with current number of ranks */
       ccl_ra_run      = 1,
       /* Finalize work */
       ccl_ra_finalize = 2,
   } ccl_resize_action_t;
   
   typedef struct
   {
       const char* match_id;
       const size_t offset;
   } ccl_fn_context_t;
   
   /* comm_size */
   typedef ccl_resize_action_t(*ccl_resize_fn_t)(size_t comm_size);
   
   /* in_buf, in_count, in_dtype, out_buf, out_count, out_dtype, context */
   typedef ccl_status_t(*ccl_prologue_fn_t) (const void*, size_t, ccl_datatype_t,
                                             void**, size_t*, ccl_datatype_t*,
                                             const ccl_fn_context_t*);
   
   /* in_buf, in_count, in_dtype, out_buf, out_count, out_dtype, context */
   typedef ccl_status_t(*ccl_epilogue_fn_t) (const void*, size_t, ccl_datatype_t,
                                             void*, size_t*, ccl_datatype_t,
                                             const ccl_fn_context_t*);
   
   /* in_buf, in_count, inout_buf, out_count, dtype, context */
   typedef ccl_status_t(*ccl_reduction_fn_t) (const void*, size_t,
                                              void*, size_t*,
                                              ccl_datatype_t,
                                              const ccl_fn_context_t*);
   
   typedef struct
   {
       ccl_prologue_fn_t prologue_fn;
       ccl_epilogue_fn_t epilogue_fn;
       ccl_reduction_fn_t reduction_fn;
   
       /* Priority for collective operation */
       size_t priority;
   
       /* Blocking/non-blocking */
       int synchronous;
   
       /* Persistent/non-persistent */
       int to_cache;
   
       /* Treat buffer as vector/regular - applicable for allgatherv only */
       int vector_buf;
   
       const char* match_id;
   } ccl_coll_attr_t;
   
   typedef struct
   {
       int color;
       /* List of rank ids for current process. Unused */
       size_t* ranks;
       /* Total number of ranks in the communicator. Unused */
       size_t size;
       /* List of device ids for current process. Unused */
       const size_t* dev_list;
       /* Hint that operation is local to process. Unused */
       int local;
   } ccl_comm_attr_t;
   
   typedef struct
   {
       /* Size of single element */
       size_t size;
   } ccl_datatype_attr_t;
   
   typedef void* ccl_comm_t;
   
   typedef void* ccl_request_t;
   
   typedef void* ccl_stream_t;
   
   #ifdef __cplusplus
   }   /*extern C */
   #endif
