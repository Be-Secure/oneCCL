
.. _program_listing_file_include_ccl_types.hpp:

Program Listing for File ccl_types.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ccl_types.hpp>` (``include\ccl_types.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "ccl_types.h"
   
   #include <stdexcept>
   
   namespace ccl
   {
   
   enum class reduction
   {
       sum = ccl_reduction_sum,
       prod = ccl_reduction_prod,
       min = ccl_reduction_min,
       max = ccl_reduction_max,
       custom = ccl_reduction_custom,
   
       last_value = ccl_reduction_last_value
   };
   
   enum datatype: int
   {
       dt_char = ccl_dtype_char,
       dt_int = ccl_dtype_int,
       dt_bfp16 = ccl_dtype_bfp16,
       dt_float = ccl_dtype_float,
       dt_double = ccl_dtype_double,
       dt_int64 = ccl_dtype_int64,
       dt_uint64 = ccl_dtype_uint64,
   
       dt_last_value = ccl_dtype_last_value
   };
   
   enum class stream_type
   {
       cpu = ccl_stream_cpu,
       sycl = ccl_stream_sycl,
   
       last_value = ccl_stream_last_value
   };
   
   typedef ccl_coll_attr_t coll_attr;
   
   typedef ccl_comm_attr_t comm_attr;
   
   typedef ccl_datatype_attr_t datatype_attr;
   
   class ccl_error : public std::runtime_error
   {
   public:
       explicit ccl_error(const std::string& message) : std::runtime_error(message)
       {}
   
       explicit ccl_error(const char* message) : std::runtime_error(message)
       {}
   };
   
   template<class ntype_t, size_t size_of_type, ccl_datatype_t ccl_type_v, bool iclass = false, bool supported = false>
   struct ccl_type_info_export
   {
       using native_type = ntype_t;
       using ccl_type = std::integral_constant<ccl_datatype_t, ccl_type_v>;
       static constexpr size_t size = size_of_type;
       static constexpr ccl_datatype_t ccl_type_value = ccl_type::value;
       static constexpr datatype ccl_datatype_value = static_cast<datatype>(ccl_type_value);
       static constexpr bool is_class = iclass;
       static constexpr bool is_supported = supported;
   };
   }
